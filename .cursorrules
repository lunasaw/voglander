# Voglander 项目 Cursor Rules

## 项目概述
这是一个基于Spring Boot的多模块设备管理系统，主要用于视频监控设备的管理和控制。

## 项目架构
### 模块说明
- `voglander-common`: 公共模块，包含常量、枚举、工具类等
- `voglander-repository`: 数据访问层，包含Entity、Mapper、缓存等
- `voglander-manager`: 业务管理层，包含复杂业务逻辑
- `voglander-service`: 服务层，包含核心业务服务
- `voglander-client`: 客户端模块，包含外部调用相关
- `voglander-integration`: 集成模块，包含第三方系统集成
- `voglander-web`: Web控制层，包含REST API
- `voglander-test`: 测试模块

### 依赖关系
- web -> manager -> service -> repository -> common
- integration -> common
- client -> common

## 编码规范

### Java代码规范
1. **命名约定**
   - 类名使用 PascalCase
   - 方法名和变量名使用 camelCase
   - 常量使用 UPPER_SNAKE_CASE
   - 包名使用小写，以 `io.github.lunasaw.voglander` 为根包
   - 统一使用lombok处理日志，使用@Slf4j注解
   - 统一使用lombok处理getter和setter方法，使用@Getter和@Setter注解
   - 统一使用lombok处理构造方法，使用@AllArgsConstructor和@NoArgsConstructor注解
   - 统一使用lombok处理toString方法，使用@ToString注解

2. **类结构**
   - Entity类以 `DO` 结尾 (Data Object)
   - DTO类以 `DTO` 结尾 (Data Transfer Object)
   - VO类以 `VO` 结尾 (Value Object)
   - 嵌套VO类以 `Resp` 结尾 (Value Object) 比如需要返回嵌套list的VO模型
   - QO类以 `Req` 结尾 (Query Object)
   - 数据模型基础数据字段放在Assembler中处理
   - Controller类以 `Controller` 结尾
   - Service类以 `Service` 结尾，实现类以 `ServiceImpl` 结尾
   - Manager类以 `Manager` 结尾
   - Mapper类以 `Mapper` 结尾

3. **注解使用**
   - 使用 `@RestController` 而不是 `@Controller + @ResponseBody`
   - 使用 `@Service`、`@Repository`、`@Component` 等Spring注解
   - 使用 `@Autowired` 或构造函数注入
   - 使用 `@Valid` 进行参数校验

4. **Java版本和包导入规范 (强制性要求)**
   - 项目使用 **Java 17** 版本，需要遵循Java 17的语法和特性
   - **强制使用jakarta包**而不是javax包
   - 例如：使用 `jakarta.validation.constraints.NotBlank` 而不是 `javax.validation.constraints.NotBlank`
   - 所有Jakarta EE相关的包都必须使用jakarta前缀
   - 这是强制性规范，确保项目的一致性和兼容性

5. **API文档注解 (强制性要求)**
   - 所有Controller类必须添加完整的Swagger API文档注解
   - 必需导入注解：`@Operation`、`@Parameter`、`@Content`、`@Schema`、`@ApiResponse`、`@Tag`
   - 类级别添加 `@Tag(name = "功能名称", description = "功能描述")`
   - 每个方法添加 `@Operation(summary = "接口简述", description = "详细描述")`
   - 路径参数添加 `@Parameter(description = "参数说明")`
   - 重要接口添加 `@ApiResponse(responseCode = "200", description = "成功")`
   - 保持注解描述的中文化和专业性

6. **JSON序列化规范 (强制性要求)**
   - 项目内所有JSON序列化和反序列化统一使用fastjson2
   - 禁止使用Jackson、Gson等其他JSON库进行序列化操作
   - 配置类中统一配置fastjson2作为默认JSON处理器
   - 自定义序列化器和反序列化器基于fastjson2实现
   - 确保JSON处理的一致性和性能优化

### 代码组织
1. **分层架构**
   - Controller层：处理HTTP请求，参数校验，调用Service
   - Service层：业务逻辑处理，事务控制
   - Manager层：复杂业务逻辑，多服务组合
   - Repository层：数据访问，缓存操作

2. **分层调用规范 (强制性要求)**
   - **复杂业务场景**：涉及多表处理、业务逻辑复杂的情况下，Controller层应新建专门的Service，该Service调用不同的Manager处理具体业务逻辑。此时的Service层也可以直接调用IService的基础方法
   - **简单业务场景**：对于简单的单表查询操作，Controller层可以直接调用IService处理，无需经过Manager层
   - **架构选择原则**：根据业务复杂度灵活选择调用链路，避免过度设计和不必要的层级嵌套
   - **职责边界**：Service层负责业务流程编排，Manager层负责具体业务逻辑实现，IService层负责基础数据操作

2. **异常处理**
   - 使用 `ServiceException` 进行业务异常处理
   - 使用 `GlobalExceptionHandler` 进行全局异常处理
   - 自定义异常枚举 `ServiceExceptionEnum`

3. **返回值规范**
   - 统一使用 `AjaxResult` 作为API返回值
   - 成功返回使用 `AjaxResult.success()`
   - 失败返回使用 `AjaxResult.error()`

4. **时间字段返回格式规范 (强制性要求)**
   - 所有Controller层VO返回的时间字段必须统一返回unix时间戳（毫秒级）
   - 禁止返回字符串格式的时间（如"2023-12-01 10:30:00"）
   - 时间字段命名建议以Time结尾，如：createTime、updateTime、expireTime等
   - 对于需要显示具体时间格式的场景，由前端根据unix时间戳进行格式化处理
   - DTO中可以使用Date或LocalDateTime类型，转换到VO时根据类型使用不同方法：
     - Date类型：使用date.getTime()方法获取毫秒级时间戳
     - LocalDateTime类型：使用localDateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()方法获取毫秒级时间戳
   - 确保时间数据的一致性和国际化兼容性

5. **时间字段类型规范 (强制性要求)**
   - DO层（数据对象层）统一使用LocalDateTime类型处理时间字段
   - DTO层（数据传输对象层）统一使用LocalDateTime类型处理时间字段
   - 禁止在DO和DTO层使用Date、Timestamp等其他时间类型
   - 保持数据层时间处理的统一性和现代化

6. **时间转换领域方法规范 (强制性要求)**
   - 在DTO类中提供时间转换的领域方法，避免重复编写转换逻辑
   - 为LocalDateTime字段提供转换为毫秒级时间戳的便捷方法
   - 方法命名规范：字段名 + "ToEpochMilli"，如：createTimeToEpochMilli()、updateTimeToEpochMilli()
   - 方法实现：return fieldName != null ? fieldName.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli() : null;
   - 提高代码可读性，减少转换逻辑的重复编写

7. **分页返回格式规范 (强制性要求)**
   - 所有分页查询接口必须使用统一的返回格式
   - 分页数据必须包装在 `items` 字段中
   - 创建对应的 `XxxListResp` 响应对象来包装分页数据
   - 返回格式示例：
     ```json
     {
         "code": 0,
         "msg": "操作成功",
         "data": {
             "items": [
                 // 具体数据项
             ]
         }
     }
     ```
   - 禁止直接返回数组格式或包含 `total` 等分页信息在根级别
   - 分页响应对象命名规范：以 `ListResp` 结尾，如 `RoleListResp`、`DeviceListResp`
   - 确保前后端接口格式的一致性和规范性

8. **数据检查**
   - 统一使用 `Assert` 进行数据检查，采用apache-commons-lang3的Assert工具类

## 数据库规范
1. **MyBatis Plus**
   - 使用 `@TableName` 注解指定表名
   - 使用 `@TableId` 注解指定主键
   - 使用 `@TableField` 注解指定字段映射

2. **基础Mapper使用规范 (强制性要求)**
   - 框架使用mybatis-plus，所有简单的数据库操作都必须使用基础Mapper
   - 优先使用BaseMapper提供的基础方法：save()、saveOrUpdate()、removeById()、updateById()、getById()、list()等
   - 对于简单的CRUD操作，禁止编写自定义SQL，直接使用BaseMapper的方法
   - 只有复杂查询、联表查询、批量操作等才编写自定义SQL
   - 保持代码简洁性和一致性，提高开发效率

3. **Service层和Manager层查询规范 (强制性要求)**
   - 新增的SQL查询都必须通过mybatis-plus进行
   - 查询业务逻辑封装在Manager层，Manager层调用Service层
   - Service层必须继承 `extends IService<XXXDO>`，利用mybatis-plus提供的基础能力
   - Service层只负责当前表的查询和操作，保持单一职责
   - 复杂查询（如多表关联查询）必须在Manager层实现
   - 一般情况下不需要新增Mapper层，直接使用IService提供的方法
   - 如有特殊需求需要自定义Mapper，必须明确说明原因和必要性

4. **Manager层数据操作统一入口规范 (强制性要求)**
   - 所有Manager层的数据插入、修改、删除操作必须提供统一入口方法
   - 核心修改操作统一入口：`xxxInternal(DO对象, 操作类型描述)` - 负责统一的缓存清理、日志记录和数据校验
   - 核心删除操作统一入口：`deleteXxxInternal(主键ID, 操作类型描述)` - 负责统一的缓存清理、日志记录和数据校验
   - 所有对外的增删改方法都必须调用对应的内部统一方法，不允许直接操作数据库
   - 统一入口方法负责：数据校验、缓存管理、日志记录、异常处理等横切关注点
   - 确保数据操作的一致性、缓存一致性和可维护性
   - 批量操作也必须通过统一入口逐个处理，保证缓存和日志的正确性

4. **缓存策略**
   - 使用 `@Cached` 注解进行缓存
   - Redis作为分布式缓存
   - 本地缓存使用 `LocalCacheBase`

5. **基础DB层缓存规范 (强制性要求)**
   - 所有基础DB层（Repository/Service层）的缓存都必须使用DO对象的JSON方式存储
   - 缓存key必须使用数据库主键id或者唯一字段（如serverId、username等）
   - 缓存注解示例：`@Cacheable(value = "tableName", key = "#id", unless = "#result == null")`
   - 对于唯一字段缓存：`@Cacheable(value = "tableName", key = "'unique:' + #uniqueField", unless = "#result == null")`
   - 确保缓存数据的一致性和查询效率

## 配置管理
1. **配置文件**
   - `application.yml`: 主配置文件
   - `application-dev.yml`: 开发环境配置
   - `application-test.yml`: 测试环境配置
   - `application-repo.yml`: 数据库相关配置
   - `application-inte.yml`: 集成相关配置

2. **常量管理**
   - API常量放在 `ApiConstant`
   - 缓存常量放在 `CacheConstants`
   - 设备相关常量放在 `DeviceConstant`
   - MQ相关常量放在对应的MQ常量类

## 业务规范
1. **设备管理**
   - 设备注册使用 `DeviceRegisterService`
   - 设备命令使用 `DeviceCommandService`
   - 设备协议枚举 `DeviceAgreementEnum`

2. **Excel处理**
   - 使用EasyExcel进行Excel操作
   - 读取Bean继承 `ExcelReadBean`
   - 写入Bean继承 `ExcelWriteBean`

3. **限流和防重复提交**
   - 使用 `@RateLimiter` 注解进行限流
   - 使用 `@RepeatSubmit` 注解防重复提交

## 测试规范
1. **单元测试**
   - 测试类以 `Test` 结尾
   - 使用 `@SpringBootTest` 进行集成测试
   - 测试方法使用 `@Test` 注解

2. **Mock注解规范 (强制性要求)**
   - 禁止使用 `@MockBean` 注解，该注解自Spring 3.4.0起已被标记为废弃，计划在4.0.0版本中移除
   - 统一使用 `@MockitoBean` 注解替代 `@MockBean`
   - 导入路径：`org.springframework.test.context.bean.override.mockito.MockitoBean`
   - 确保测试代码的前瞻性和兼容性

3. **测试数据**
   - 使用 `app.db` 作为测试数据库
   - 测试SQL放在 `sql/` 目录

## 日志规范
1. **日志配置**
   - 使用 `logback-spring.xml` 配置日志
   - 不同环境使用不同的日志级别

2. **日志使用**
   - 使用 `@Slf4j` 注解
   - 重要操作记录INFO级别日志
   - 异常记录ERROR级别日志

## 安全规范
1. **API安全**
   - 使用过滤器进行请求预处理
   - IP工具类 `IpUtils` 进行IP相关操作
   - 使用拦截器进行请求拦截

## 性能优化
1. **异步处理**
   - 使用 `AsyncManager` 进行异步任务管理
   - 使用 `ThreadPoolConfig` 配置线程池

2. **并发处理**
   - 使用 `ConcurrentProcessHelper` 处理并发场景
   - 使用 `Threads` 工具类进行线程操作

## 代码生成指导
- 遵循现有的分层架构
- 保持代码风格一致
- 添加必要的注释和文档
- 考虑异常处理和日志记录
- 遵循Spring Boot最佳实践

## 重构后的架构

```
Web Layer (Controller)
    ↓ uses
DeviceWebAssembler (Req -> DTO 转换)
    ↓ DTO
    ┌─────────────────────────────────────────────┐
    │  根据业务复杂度灵活选择调用链路                    │
    └─────────────────────────────────────────────┘
                    │                    │
                    ├─ 复杂业务场景 ────→ Service Layer (封装业务)
                    │                         ↓ uses
                    │                    Manager Layer (业务逻辑)
                    │                         ↓ uses
                    └─ 简单业务场景 ────→ IService Layer (基础数据操作)
                                              ↓ uses
                                    DeviceAssembler (DTO <-> DO 转换)
                                              ↓ DO
                                    Repository Layer (数据访问)
```

### 调用规范说明：
- **复杂业务场景**：Controller → Service → Manager → IService → Repository
- **简单业务场景**：Controller → IService → Repository
- **中等复杂度**：Controller → Manager → IService → Repository